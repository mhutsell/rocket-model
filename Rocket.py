#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Mon Feb 17 15:58:04 2020@author: Mack"""# Rocket.pyimport mathimport numpy as npimport matplotlib.pyplot as pltimport pprintDT = 0.01                                   # set our delta t (s)gravity = -9.81                             # set gravity (m/s^2)simulation_time = 100                       # length of simulation (s)burnout_time = 60                           # period over which fuel burnsnumIterations = int(simulation_time/DT) + 1 # How many iterations we have of looprocket_mass = 1000                          # Mass of rocket without fuelinitial_mass = 5000                         # Mass of rocket with fuelfuel_mass = initial_mass-rocket_mass        # Mass of fuelmass = initial_mass                         # Variable that is tracked in loopchange_in_mass = fuel_mass/burnout_time     # How quickly our mass changes (assuming constant change)t = 0                                       # Initial timetime = [t]                                  # Initializing our time listv = 0                                       # Initial velocityvelocity = [v]                              # Initializing our velocity listp = 0                                       # Initial positionposition = [p]                              # Initializing our position listchange_in_position = v                      # Initializing change in position as velocitymass_l = [mass]                             # Initializing mass listisp = 200                                   # Initializing special impulse to 200 (from book)coefficient_drag = 0.6                      # Intializing drag coefficient to 0.6 (online)area_rocket = 25*math.pi                    # The area at the bottom of our rocket (from online)	thrust_list = []                            # Initializing our thrust listgrav_list = []                              # Initializing our gravity listair_resistance_list = []                    # Initializing our air resistance list# loop the desired numebr of timesfor i in range(1, numIterations):    t = i * DT                              # Our time for each iteration     time.append(t)                          # Add to time list        if(mass > rocket_mass):                 # This section checks to make sure        mass -= (change_in_mass) * DT       # that our rocket's mass doesn't        if(mass < rocket_mass):             # drop below the mass of its frame            mass = rocket_mass              # as that would be impossible. (lost mass is lost fuel-mass)        mass_l.append(mass)                 # Before it reaches the base mass    else:                                   # of the rocket, it subtracts the        mass_l.append(mass)                 # change_in_mass from mass each iteration        p += (change_in_position) * DT          # Change position based on what velocity previously was    position.append(p)                      # add new position to position list    density_air = 1.225*np.exp(-0.1385*p)   # calculate the density of air at our new position    if(mass == rocket_mass):                # This if-statement makes sure that if our mass        change_in_mass = 0                  # = base rocket mass, we stop having a change in mass                                            # and therefore, thrust becomes 0, as no more fuel is used        # Calculate acceleration due to thrust and add it to thrust list    thrust_a = (isp * gravity * (-change_in_mass)) / mass * DT     thrust_list.append(thrust_a)    # Calculate acceleration due to gravity and add it to gravity list    grav_a = gravity * DT    grav_list.append(grav_a)    # Calculate acceleration due to air resistance and add it to air resistance list    air_resistance_a = ((1/2) * density_air * (v**2) * coefficient_drag * area_rocket)/mass * DT    air_resistance_list.append(air_resistance_a)    # Calculate new velocity based on acceleration due to thrust, gravity, and air resistance    # Then add it to velocity list    v = v + thrust_a + grav_a - air_resistance_a    velocity.append(v)        # Set new change in position to new velocity value    change_in_position = v# Plot in two separate graphs position vs time and velocity vs timeplt.figure(1)plt.plot(time, position, label="Position vs Time")plt.figure(2)plt.plot(time, velocity, label = "Velocity vs Time")